// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.

syntax = "proto3";

package qrl;

// TODO: Avoid using timestamp until the github issue is fixed
// import "google/protobuf/timestamp.proto";
message Timestamp {
    int64 seconds = 1;
    int32 nanos = 2;
}

service P2PNode {
    rpc Ping (PingReq) returns (PongResp) {
    }
    rpc GetKnownPeers (GetKnownPeersReq) returns (GetKnownPeersResp) {
    }
}

service PublicAPI {
    rpc GetKnownPeers (GetKnownPeersReq) returns (GetKnownPeersResp) {
    }
    rpc GetAddressState (GetAddressStateReq) returns (GetAddressStateResp) {
    }

    rpc TransferCoins (TransferCoinsReq) returns (TransferCoinsResp) {
    }
    rpc PushTransaction (PushTransactionReq) returns (PushTransactionResp) {
    }
}

service TestingAPI {
}

// API Messages

message PingReq {
    string name = 1;
}
message PongResp {
    string message = 1;
}
message GetKnownPeersReq {
}
message GetKnownPeersResp {
    KnownPeers known_peers = 1;
}

message GetAddressStateLocalReq {
    uint32 address_idx = 1;
}
message GetAddressStateReq {
    string address = 1;
}
message GetAddressStateResp {
    AddressState state = 1;
}

message TransferCoinsReq {
    string address_from = 1;
    string address_to = 2;
    uint64 amount = 3; // IMPORTANT: These should be expressed in Shor
    uint64 fee = 4; // IMPORTANT: These should be expressed in Shor
    bytes xmss_pk = 5;
    uint64 xmss_ots_index = 6;
}
message TransferCoinsResp {
    Transaction transaction_unsigned = 1;
}

message PushTransactionReq {
    Transaction transaction_signed = 1;
}
message PushTransactionResp {
    string some_response = 1;
}

// Content

message WalletStore {
    repeated Wallet wallets = 1;
}

message Wallet {
    string address = 1;
    string mnemonic = 2;
    int32 xmss_index = 3;
}

message KnownPeers {
    repeated Peer peers = 1;
}

message Peer {
    string ip = 1;
}

message AddressState {
    //    int64 range = [ -9223372036854775808 to 9223372036854775807 ]
    //    QRL coins = 105M - 10^8 = 10499999999999999

    string address = 1;
    uint64 balance = 2;
    uint64 nonce = 3; // FIXME: Discuss. 32 or 64 bits?
    repeated bytes pubhashes = 4;
    repeated Transaction transactions = 5;
    // FIXME: Add stake information. Probably a reference to another obj
}

message BlockHeader {
    // Header
    uint64 block_number = 1;
    uint64 epoch = 2;
    Timestamp timestamp = 3; // FIXME: Temporary

    bytes hash_header = 4;
    bytes hash_header_prev = 5;

    uint64 reward_block = 6;
    uint64 reward_fee = 7;

    bytes merkle_root = 8;
    bytes hash_reveal = 9;
    bytes stake_selector = 10;
}

message Block {
    BlockHeader header = 1;
    repeated Transaction transactions = 2;
    repeated Transaction dup_transactions = 3; // TODO: Review this

    repeated AddressState state = 4;

    repeated string stake_list = 5; // addresses
}

message BlockMetaData {
    uint64 block_number = 1;
    bytes hash_header = 2;
}

message MR {
    bytes hash = 1;
    string type = 2;
    bytes stake_selector = 3;
    uint64 block_number = 4;
    bytes prev_headerhash = 5;
    bytes reveal_hash = 6;
}

message Transaction {
    enum Type {
        UNKNOWN = 0;
        TRANSFER = 1;
        STAKE = 2;
        COINBASE = 3;
        LATTICE = 4;
        DUPLICATE = 5;
    }

    Type type = 1;

    uint64 nonce = 2;
    bytes addr_from = 3;
    bytes public_key = 4;
    bytes transaction_hash = 5;
    uint32 ots_key = 6;
    bytes signature = 7;

    oneof transactionType {
        Transfer transfer = 8;
        Stake stake = 9;
        CoinBase coinbase = 10;
        LatticePublicKey latticePK = 11;
        Duplicate duplicate = 12;
    }

    //////////
    message Transfer {
        bytes addr_to = 1;
        uint64 amount = 2;
        uint64 fee = 3;
    }

    message Stake {
        uint64 balance = 1;
        uint64 epoch = 2;
        uint64 finalized_blocknumber = 3;
        bytes finalized_headerhash = 4;
        bytes slavePK = 5;
        bytes hash = 7;
    }

    message CoinBase {
        bytes addr_to = 1;
        uint64 amount = 2;
    }

    message LatticePublicKey {
        bytes pk_kyber = 1;
        bytes pk_tesla = 2;
    }

    message Duplicate {
        uint64 block_number = 1;
        uint64 prev_header_hash = 2;
        bytes coinbase1_hhash = 3;
        bytes coinbase2_hhash = 4;
        Transaction coinbase1 = 5;
        Transaction coinbase2 = 6;
    }

}

